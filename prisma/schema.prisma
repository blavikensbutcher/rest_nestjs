// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String?
  email    String  @unique
  password String

  accessToken  String? @default("") @map("access_token")
  refreshToken String? @default("") @map("refresh_token")

  workInterval  Int @default(50) @map("work_interval")
  breakInterval Int @default(10) @map("break_interval")
  intervalCount Int @default(7) @map("interval_count")

  comment   Comment[]
  task      Task[]
  timeBlock TimeBlock[]
  pomodoro  Pomodoro[]

  @@map("user")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean   @default(false) @map("is_completed")
  priority    Priority?
  text        String

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model Pomodoro {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean @default(false) @map("is_completed")

  user          User            @relation(fields: [userId], references: [id])
  userId        String          @map("user_id")
  PomodoroRound PomodoroRound[]

  @@map("pomodoro")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted  Boolean @default(false) @map("is_completed")
  totalSeconds Int     @map("total_seconds")

  pomodoro   Pomodoro @relation(fields: [pomodoroId], references: [id], onDelete: Cascade)
  pomodoroId String   @map("pomodoro_id")

  @@map("pomodoro_round")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  text      String
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@map("comment")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
